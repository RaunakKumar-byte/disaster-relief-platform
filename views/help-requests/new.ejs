<%- include('../partials/header') %>

<div class="container mx-auto px-4 py-8">
  <h1 class="text-3xl font-bold mb-6">Request Help</h1>

  <div class="bg-white rounded-lg shadow-md overflow-hidden">
    <form action="/help-requests/new" method="POST" class="p-6">
      <% if (locals.error) { %>
        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-6">
          <p><%= error %></p>
        </div>
      <% } %>

      <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div class="md:col-span-2">
          <label for="title" class="block text-gray-700 font-semibold mb-2">Request Title *</label>
          <input type="text" id="title" name="title" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary">
        </div>

        <div class="md:col-span-2">
          <label for="description" class="block text-gray-700 font-semibold mb-2">Description *</label>
          <textarea id="description" name="description" rows="4" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary"></textarea>
        </div>

        <div>
          <label for="type" class="block text-gray-700 font-semibold mb-2">Help Type *</label>
          <select id="type" name="type" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary">
            <option value="" disabled selected>Select help type</option>
            <option value="food">Food</option>
            <option value="water">Water</option>
            <option value="medical">Medical</option>
            <option value="shelter">Shelter</option>
            <option value="evacuation">Evacuation</option>
            <option value="other">Other</option>
          </select>
        </div>

        <div>
          <label for="urgency" class="block text-gray-700 font-semibold mb-2">Urgency Level</label>
          <select id="urgency" name="urgency" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary">
            <option value="low">Low</option>
            <option value="medium" selected>Medium</option>
            <option value="high">High</option>
            <option value="critical">Critical</option>
          </select>
        </div>

        <div>
          <label for="peopleAffected" class="block text-gray-700 font-semibold mb-2">Number of People Affected</label>
          <input type="number" id="peopleAffected" name="peopleAffected" min="1" value="1" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary">
        </div>

        <div>
          <label for="contactPhone" class="block text-gray-700 font-semibold mb-2">Contact Phone</label>
          <input type="tel" id="contactPhone" name="contactPhone" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary">
        </div>

        <div class="md:col-span-2">
          <label class="block text-gray-700 font-semibold mb-2">Location *</label>
          <div id="location-map" class="mini-map mb-4 border border-gray-300 rounded-md"></div>

          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label for="latitude" class="block text-gray-700 text-sm mb-1">Latitude *</label>
              <input type="text" id="latitude" name="latitude" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary">
            </div>

            <div>
              <label for="longitude" class="block text-gray-700 text-sm mb-1">Longitude *</label>
              <input type="text" id="longitude" name="longitude" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary">
            </div>
          </div>

          <div class="mt-4">
            <label for="address" class="block text-gray-700 text-sm mb-1">Address *</label>
            <input type="text" id="address" name="address" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary">
          </div>

          <div class="mt-4 flex gap-4">
            <button type="button" id="use-my-location" class="bg-secondary text-white font-bold py-2 px-4 rounded-md hover:bg-green-600">
              <i class="fas fa-location-arrow mr-2"></i> Use My Location
            </button>
            <button type="button" id="search-location" class="bg-gray-200 text-gray-800 font-bold py-2 px-4 rounded-md hover:bg-gray-300">
              <i class="fas fa-search mr-2"></i> Search Location
            </button>
          </div>

          <div id="search-container" class="mt-4 hidden">
            <div class="flex gap-2">
              <input type="text" id="location-search" placeholder="Enter city, address or place" class="flex-grow px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary">
              <button type="button" id="search-button" class="bg-primary text-white font-bold py-2 px-4 rounded-md hover:bg-blue-800">
                Search
              </button>
            </div>
            <div id="search-results" class="mt-2"></div>
          </div>
        </div>

        <div class="md:col-span-2">
          <label for="relatedDisaster" class="block text-gray-700 font-semibold mb-2">Related Disaster (Optional)</label>
          <select id="relatedDisaster" name="relatedDisaster" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary">
            <option value="">Select related disaster</option>
            <% if (locals.disasters) { %>
              <% disasters.forEach(function(disaster) { %>
                <option value="<%= disaster._id %>"><%= disaster.title %> (<%= disaster.type %>)</option>
              <% }); %>
            <% } %>
          </select>
        </div>

        <div class="md:col-span-2">
          <button type="submit" class="bg-primary text-white font-bold py-2 px-6 rounded-md hover:bg-blue-800">
            Submit Help Request
          </button>
        </div>
      </div>
    </form>
  </div>
</div>

<script>
// Initialize map
const map = L.map('location-map').setView([20, 0], 2);
let marker;

// Add tile layer
L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
  attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
}).addTo(map);

// Function to update marker position
function updateMarkerPosition(lat, lng) {
  document.getElementById('latitude').value = lat.toFixed(6);
  document.getElementById('longitude').value = lng.toFixed(6);
  
  if (marker) {
    marker.setLatLng([lat, lng]);
  } else {
    marker = L.marker([lat, lng], { draggable: true }).addTo(map);
    marker.on('dragend', function() {
      const position = marker.getLatLng();
      updateMarkerPosition(position.lat, position.lng);
      getAddressFromCoordinates(position.lat, position.lng);
    });
  }
  
  map.setView([lat, lng], 13);
}

// Function to get address from coordinates
function getAddressFromCoordinates(lat, lng) {
  fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}&zoom=18&addressdetails=1`)
    .then(response => response.json())
    .then(data => {
      if (data.display_name) {
        document.getElementById('address').value = data.display_name;
      }
    })
    .catch(error => {
      console.error('Error fetching address:', error);
      alert('Could not fetch address. Please enter it manually.');
    });
}

// Use my location button
document.getElementById('use-my-location').addEventListener('click', function() {
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(
      (position) => {
        updateMarkerPosition(position.coords.latitude, position.coords.longitude);
        getAddressFromCoordinates(position.coords.latitude, position.coords.longitude);
      },
      (error) => {
        console.error('Error getting location:', error);
        alert('Could not get your location. Please enter it manually.');
      },
      { enableHighAccuracy: true }
    );
  } else {
    alert('Geolocation is not supported by your browser.');
  }
});

// Search location functionality
document.getElementById('search-location').addEventListener('click', function() {
  const searchContainer = document.getElementById('search-container');
  searchContainer.classList.toggle('hidden');
  if (!searchContainer.classList.contains('hidden')) {
    document.getElementById('location-search').focus();
  }
});

document.getElementById('search-button').addEventListener('click', function() {
  const searchTerm = document.getElementById('location-search').value.trim();
  if (searchTerm) {
    searchLocation(searchTerm);
  }
});

function searchLocation(searchTerm) {
  fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(searchTerm)}&limit=5`)
    .then(response => response.json())
    .then(data => {
      const searchResults = document.getElementById('search-results');
      searchResults.innerHTML = '';
      
      if (data.length === 0) {
        searchResults.innerHTML = '<p class="text-red-500">No results found. Try a different search term.</p>';
        return;
      }
      
      const resultsList = document.createElement('ul');
      resultsList.className = 'bg-white border border-gray-300 rounded-md divide-y divide-gray-200';
      
      data.forEach(result => {
        const item = document.createElement('li');
        item.className = 'px-3 py-2 hover:bg-gray-100 cursor-pointer';
        item.textContent = result.display_name;
        item.addEventListener('click', () => {
          updateMarkerPosition(parseFloat(result.lat), parseFloat(result.lon));
          document.getElementById('address').value = result.display_name;
          searchResults.innerHTML = '';
          document.getElementById('search-container').classList.add('hidden');
        });
        resultsList.appendChild(item);
      });
      
      searchResults.appendChild(resultsList);
    })
    .catch(error => {
      console.error('Error searching for location:', error);
      alert('Error searching for location. Please try again.');
    });
}

// Map click handler
map.on('click', function(e) {
  updateMarkerPosition(e.latlng.lat, e.latlng.lng);
  getAddressFromCoordinates(e.latlng.lat, e.latlng.lng);
});

// Initialize with user location if available
if (navigator.geolocation) {
  navigator.geolocation.getCurrentPosition(
    (position) => {
      updateMarkerPosition(position.coords.latitude, position.coords.longitude);
      getAddressFromCoordinates(position.coords.latitude, position.coords.longitude);
    },
    (error) => {
      console.error('Error getting location:', error);
      // Default to a world view if location not available
      map.setView([20, 0], 2);
    }
  );
}
</script>

<%- include('../partials/footer') %>

