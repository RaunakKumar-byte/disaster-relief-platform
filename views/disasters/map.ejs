<%- include('../partials/header') %>

<div class="container mx-auto px-4 py-8">
  <h1 class="text-3xl font-bold mb-6">Disaster Map</h1>
  
  <div class="bg-white rounded-lg shadow-md p-4 mb-6">
    <div class="flex flex-wrap gap-4 mb-4">
      <div>
        <label class="font-semibold block mb-1">Filter by Type:</label>
        <select id="type-filter" class="border border-gray-300 rounded px-3 py-2">
          <option value="all">All Types</option>
          <option value="earthquake">Earthquake</option>
          <option value="flood">Flood</option>
          <option value="fire">Fire</option>
          <option value="hurricane">Hurricane</option>
          <option value="tsunami">Tsunami</option>
          <option value="other">Other</option>
        </select>
      </div>
      
      <div>
        <label class="font-semibold block mb-1">Filter by Severity:</label>
        <select id="severity-filter" class="border border-gray-300 rounded px-3 py-2">
          <option value="all">All Severities</option>
          <option value="low">Low</option>
          <option value="medium">Medium</option>
          <option value="high">High</option>
          <option value="critical">Critical</option>
        </select>
      </div>
      
      <div>
        <label class="font-semibold block mb-1">Filter by Status:</label>
        <select id="status-filter" class="border border-gray-300 rounded px-3 py-2">
          <option value="all">All Statuses</option>
          <option value="reported">Reported</option>
          <option value="verified">Verified</option>
          <option value="in-progress">In Progress</option>
          <option value="resolved">Resolved</option>
        </select>
      </div>
      
      <div>
        <label class="font-semibold block mb-1">Show on Map:</label>
        <div class="flex gap-4">
          <label class="flex items-center">
            <input type="checkbox" id="show-disasters" checked class="mr-2">
            Disasters
          </label>
          <label class="flex items-center">
            <input type="checkbox" id="show-resources" checked class="mr-2">
            Resources
          </label>
          <label class="flex items-center">
            <input type="checkbox" id="show-help-requests" checked class="mr-2">
            Help Requests
          </label>
        </div>
      </div>
    </div>
    
    <div class="flex flex-wrap gap-4">
      <button id="find-my-location" class="bg-secondary text-white font-bold py-2 px-4 rounded-md hover:bg-blue-600">
        <i class="fas fa-location-arrow mr-2"></i> Find My Location
      </button>
      
      <div class="relative flex-grow max-w-md">
        <input type="text" id="map-search" placeholder="Search for a location..." class="w-full border border-gray-300 rounded-md px-3 py-2 pr-10">
        <button id="map-search-button" class="absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-700">
          <i class="fas fa-search"></i>
        </button>
        <div id="map-search-results" class="absolute z-10 w-full mt-1 hidden"></div>
      </div>
    </div>
  </div>
  
  <div class="bg-white rounded-lg shadow-md overflow-hidden">
    <div id="map" class="map-container"></div>
  </div>
  
  <div class="mt-6 grid grid-cols-1 md:grid-cols-3 gap-6">
    <div class="bg-white rounded-lg shadow-md p-4">
      <h2 class="text-xl font-bold mb-4">Disaster Legend</h2>
      <div class="space-y-2">
        <div class="flex items-center">
          <i class="fas fa-house-damage text-yellow-500 mr-2"></i>
          <span>Earthquake</span>
        </div>
        <div class="flex items-center">
          <i class="fas fa-water text-blue-500 mr-2"></i>
          <span>Flood</span>
        </div>
        <div class="flex items-center">
          <i class="fas fa-fire text-red-500 mr-2"></i>
          <span>Fire</span>
        </div>
        <div class="flex items-center">
          <i class="fas fa-wind text-purple-500 mr-2"></i>
          <span>Hurricane</span>
        </div>
        <div class="flex items-center">
          <i class="fas fa-water text-blue-700 mr-2"></i>
          <span>Tsunami</span>
        </div>
        <div class="flex items-center">
          <i class="fas fa-exclamation-triangle text-gray-500 mr-2"></i>
          <span>Other</span>
        </div>
      </div>
    </div>
    
    <div class="bg-white rounded-lg shadow-md p-4">
      <h2 class="text-xl font-bold mb-4">Resource Legend</h2>
      <div class="space-y-2">
        <div class="flex items-center">
          <i class="fas fa-utensils text-green-500 mr-2"></i>
          <span>Food</span>
        </div>
        <div class="flex items-center">
          <i class="fas fa-tint text-blue-500 mr-2"></i>
          <span>Water</span>
        </div>
        <div class="flex items-center">
          <i class="fas fa-medkit text-red-500 mr-2"></i>
          <span>Medical</span>
        </div>
        <div class="flex items-center">
          <i class="fas fa-home text-yellow-500 mr-2"></i>
          <span>Shelter</span>
        </div>
        <div class="flex items-center">
          <i class="fas fa-tshirt text-purple-500 mr-2"></i>
          <span>Clothing</span>
        </div>
        <div class="flex items-center">
          <i class="fas fa-box text-gray-500 mr-2"></i>
          <span>Other</span>
        </div>
      </div>
    </div>
    
    <div class="bg-white rounded-lg shadow-md p-4">
      <h2 class="text-xl font-bold mb-4">Help Request Legend</h2>
      <div class="space-y-2">
        <div class="flex items-center">
          <span class="inline-block w-3 h-3 rounded-full bg-green-500 mr-2"></span>
          <span>Low Urgency</span>
        </div>
        <div class="flex items-center">
          <span class="inline-block w-3 h-3 rounded-full bg-yellow-500 mr-2"></span>
          <span>Medium Urgency</span>
        </div>
        <div class="flex items-center">
          <span class="inline-block w-3 h-3 rounded-full bg-orange-500 mr-2"></span>
          <span>High Urgency</span>
        </div>
        <div class="flex items-center">
          <span class="inline-block w-3 h-3 rounded-full bg-red-500 mr-2"></span>
          <span>Critical Urgency</span>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // Initialize map
  const map = L.map('map').setView([20, 0], 2);
  let userMarker;
  
  // Add tile layer
  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
  }).addTo(map);
  
  // Create layer groups
  const disastersLayer = L.layerGroup().addTo(map);
  const resourcesLayer = L.layerGroup().addTo(map);
  const helpRequestsLayer = L.layerGroup().addTo(map);
  
  // Custom icons for disasters
  const createDisasterIcon = (type) => {
    const iconMap = {
      earthquake: 'house-damage',
      flood: 'water',
      fire: 'fire',
      hurricane: 'wind',
      tsunami: 'water',
      other: 'exclamation-triangle'
    };
    
    const colorMap = {
      earthquake: 'yellow',
      flood: 'blue',
      fire: 'red',
      hurricane: 'purple',
      tsunami: 'darkblue',
      other: 'gray'
    };
    
    const icon = iconMap[type] || 'exclamation-triangle';
    const color = colorMap[type] || 'gray';
    
    return L.divIcon({
      html: `<i class="fas fa-${icon}" style="color: ${color}; font-size: 24px;"></i>`,
      className: 'disaster-icon',
      iconSize: [24, 24],
      iconAnchor: [12, 12]
    });
  };
  
  // Custom icons for resources
  const createResourceIcon = (type) => {
    const iconMap = {
      food: 'utensils',
      water: 'tint',
      medical: 'medkit',
      shelter: 'home',
      clothing: 'tshirt',
      other: 'box'
    };
    
    const colorMap = {
      food: 'green',
      water: 'blue',
      medical: 'red',
      shelter: 'orange',
      clothing: 'purple',
      other: 'gray'
    };
    
    const icon = iconMap[type] || 'box';
    const color = colorMap[type] || 'gray';
    
    return L.divIcon({
      html: `<i class="fas fa-${icon}" style="color: ${color}; font-size: 24px;"></i>`,
      className: 'resource-icon',
      iconSize: [24, 24],
      iconAnchor: [12, 12]
    });
  };
  
  // Custom icons for help requests
  const createHelpRequestIcon = (urgency) => {
    const colorMap = {
      low: '#10b981', // green
      medium: '#f59e0b', // yellow
      high: '#f97316', // orange
      critical: '#ef4444' // red
    };
    
    const color = colorMap[urgency] || '#6b7280'; // gray default
    
    return L.divIcon({
      html: `<i class="fas fa-hands-helping" style="color: ${color}; font-size: 24px;"></i>`,
      className: 'help-request-icon',
      iconSize: [24, 24],
      iconAnchor: [12, 12]
    });
  };
  
  // Load data and populate map
  let disasters = [];
  let resources = [];
  let helpRequests = [];
  
  // Fetch disasters
  fetch('/api/disasters')
    .then(response => response.json())
    .then(data => {
      disasters = data;
      updateDisastersLayer();
    })
    .catch(error => {
      console.error('Error fetching disasters:', error);
      // Add sample data if API fails
      disasters = [
        {
          _id: 'sample1',
          title: 'Sample Earthquake',
          type: 'earthquake',
          location: {
            coordinates: [77.2090, 28.6139], // Delhi
            address: 'New Delhi, India'
          },
          severity: 'high',
          status: 'reported',
          createdAt: new Date().toISOString()
        },
        {
          _id: 'sample2',
          title: 'Sample Flood',
          type: 'flood',
          location: {
            coordinates: [-74.0060, 40.7128], // New York
            address: 'New York, USA'
          },
          severity: 'medium',
          status: 'in-progress',
          createdAt: new Date().toISOString()
        }
      ];
      updateDisastersLayer();
    });
  
  // Fetch resources
  fetch('/api/resources')
    .then(response => response.json())
    .then(data => {
      resources = data;
      updateResourcesLayer();
    })
    .catch(error => {
      console.error('Error fetching resources:', error);
      // Add sample data if API fails
      resources = [
        {
          _id: 'sample1',
          name: 'Food Supplies',
          type: 'food',
          quantity: 500,
          unit: 'kg',
          location: {
            coordinates: [72.8777, 19.0760], // Mumbai
            address: 'Mumbai, India'
          },
          status: 'available'
        },
        {
          _id: 'sample2',
          name: 'Medical Kits',
          type: 'medical',
          quantity: 100,
          unit: 'kits',
          location: {
            coordinates: [-0.1278, 51.5074], // London
            address: 'London, UK'
          },
          status: 'available'
        }
      ];
      updateResourcesLayer();
    });
  
  // Fetch help requests
  fetch('/api/help-requests')
    .then(response => response.json())
    .then(data => {
      helpRequests = data;
      updateHelpRequestsLayer();
    })
    .catch(error => {
      console.error('Error fetching help requests:', error);
      // Add sample data if API fails
      helpRequests = [
        {
          _id: 'sample1',
          title: 'Need Medical Assistance',
          type: 'medical',
          location: {
            coordinates: [2.3522, 48.8566], // Paris
            address: 'Paris, France'
          },
          urgency: 'high',
          status: 'open'
        },
        {
          _id: 'sample2',
          title: 'Need Water Supplies',
          type: 'water',
          location: {
            coordinates: [139.6917, 35.6895], // Tokyo
            address: 'Tokyo, Japan'
          },
          urgency: 'critical',
          status: 'open'
        }
      ];
      updateHelpRequestsLayer();
    });
  
  // Update disasters layer based on filters
  function updateDisastersLayer() {
    disastersLayer.clearLayers();
    
    const typeFilter = document.getElementById('type-filter').value;
    const severityFilter = document.getElementById('severity-filter').value;
    const statusFilter = document.getElementById('status-filter').value;
    
    disasters.forEach(disaster => {
      // Apply filters
      if (
        (typeFilter === 'all' || disaster.type === typeFilter) &&
        (severityFilter === 'all' || disaster.severity === severityFilter) &&
        (statusFilter === 'all' || disaster.status === statusFilter)
      ) {
        // Ensure coordinates are in the correct format [lng, lat]
        const lng = disaster.location.coordinates[0];
        const lat = disaster.location.coordinates[1];
        
        const marker = L.marker([lat, lng], {
          icon: createDisasterIcon(disaster.type)
        });
        
        marker.bindPopup(`
          <div class="text-center mb-2">
            <span class="inline-block px-2 py-1 rounded text-white severity-${disaster.severity}">${disaster.severity.toUpperCase()}</span>
          </div>
          <h3 class="font-bold">${disaster.title}</h3>
          <p class="text-sm">${disaster.type.charAt(0).toUpperCase() + disaster.type.slice(1)}</p>
          <p class="text-sm">${disaster.location.address}</p>
          <p class="text-sm">Status: ${disaster.status.charAt(0).toUpperCase() + disaster.status.slice(1)}</p>
          <div class="mt-2">
            <a href="/disasters/${disaster._id}" class="text-primary hover:underline">View Details</a>
          </div>
        `);
        
        disastersLayer.addLayer(marker);
      }
    });
  }
  
  // Update resources layer
  function updateResourcesLayer() {
    resourcesLayer.clearLayers();
    
    resources.forEach(resource => {
      if (resource.status === 'available') {
        const lng = resource.location.coordinates[0];
        const lat = resource.location.coordinates[1];
        
        const marker = L.marker([lat, lng], {
          icon: createResourceIcon(resource.type)
        });
        
        marker.bindPopup(`
          <h3 class="font-bold">${resource.name}</h3>
          <p class="text-sm">${resource.quantity} ${resource.unit} of ${resource.type}</p>
          <p class="text-sm">${resource.location.address}</p>
          <div class="mt-2">
            <a href="/resources/${resource._id}" class="text-primary hover:underline">View Details</a>
          </div>
        `);
        
        resourcesLayer.addLayer(marker);
      }
    });
  }
  
  // Update help requests layer
  function updateHelpRequestsLayer() {
    helpRequestsLayer.clearLayers();
    
    helpRequests.forEach(request => {
      if (request.status === 'open' || request.status === 'assigned') {
        const lng = request.location.coordinates[0];
        const lat = request.location.coordinates[1];
        
        const marker = L.marker([lat, lng], {
          icon: createHelpRequestIcon(request.urgency)
        });
        
        marker.bindPopup(`
          <div class="text-center mb-2">
            <span class="inline-block px-2 py-1 rounded text-white urgency-${request.urgency}">${request.urgency.toUpperCase()}</span>
          </div>
          <h3 class="font-bold">${request.title}</h3>
          <p class="text-sm">Need: ${request.type.charAt(0).toUpperCase() + request.type.slice(1)}</p>
          <p class="text-sm">${request.location.address}</p>
          <p class="text-sm">Status: ${request.status.charAt(0).toUpperCase() + request.status.slice(1)}</p>
          <div class="mt-2">
            <a href="/help-requests/${request._id}" class="text-primary hover:underline">View Details</a>
          </div>
        `);
        
        helpRequestsLayer.addLayer(marker);
      }
    });
  }
  
  // Event listeners for filters
  document.getElementById('type-filter').addEventListener('change', updateDisastersLayer);
  document.getElementById('severity-filter').addEventListener('change', updateDisastersLayer);
  document.getElementById('status-filter').addEventListener('change', updateDisastersLayer);
  
  // Event listeners for layer toggles
  document.getElementById('show-disasters').addEventListener('change', function() {
    if (this.checked) {
      map.addLayer(disastersLayer);
    } else {
      map.removeLayer(disastersLayer);
    }
  });
  
  document.getElementById('show-resources').addEventListener('change', function() {
    if (this.checked) {
      map.addLayer(resourcesLayer);
    } else {
      map.removeLayer(resourcesLayer);
    }
  });
  
  document.getElementById('show-help-requests').addEventListener('change', function() {
    if (this.checked) {
      map.addLayer(helpRequestsLayer);
    } else {
      map.removeLayer(helpRequestsLayer);
    }
  });
  
  // Find my location button
  document.getElementById('find-my-location').addEventListener('click', function() {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const lat = position.coords.latitude;
          const lng = position.coords.longitude;
          
          map.setView([lat, lng], 13);
          
          // Add or update user marker
          if (userMarker) {
            userMarker.setLatLng([lat, lng]);
          } else {
            userMarker = L.marker([lat, lng], {
              icon: L.divIcon({
                html: '<i class="fas fa-user-circle" style="color: #3b82f6; font-size: 24px;"></i>',
                className: 'user-location-icon',
                iconSize: [24, 24],
                iconAnchor: [12, 12]
              })
            }).addTo(map);
            userMarker.bindPopup('Your Location').openPopup();
          }
        },
        (error) => {
          console.error('Error getting location:', error);
          alert('Could not get your location. Please try again or search for a location.');
        },
        { enableHighAccuracy: true }
      );
    } else {
      alert('Geolocation is not supported by your browser.');
    }
  });
  
  // Map search functionality
  document.getElementById('map-search-button').addEventListener('click', function() {
    const searchTerm = document.getElementById('map-search').value.trim();
    if (searchTerm) {
      searchLocation(searchTerm);
    }
  });
  
  document.getElementById('map-search').addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
      e.preventDefault();
      const searchTerm = this.value.trim();
      if (searchTerm) {
        searchLocation(searchTerm);
      }
    }
  });
  
  function searchLocation(searchTerm) {
    fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(searchTerm)}&limit=5`)
      .then(response => response.json())
      .then(data => {
        const searchResults = document.getElementById('map-search-results');
        searchResults.innerHTML = '';
        
        if (data.length === 0) {
          searchResults.innerHTML = '<p class="p-2 bg-white border border-gray-300 rounded-md text-red-500">No results found. Try a different search term.</p>';
          searchResults.classList.remove('hidden');
          return;
        }
        
        // Create list of results
        const resultsList = document.createElement('ul');
        resultsList.className = 'bg-white border border-gray-300 rounded-md divide-y divide-gray-200';
        
        data.forEach(result => {
          const item = document.createElement('li');
          item.className = 'px-3 py-2 hover:bg-gray-100 cursor-pointer';
          item.textContent = result.display_name;
          item.addEventListener('click', () => {
            map.setView([parseFloat(result.lat), parseFloat(result.lon)], 13);
            searchResults.classList.add('hidden');
            document.getElementById('map-search').value = result.display_name;
          });
          resultsList.appendChild(item);
        });
        
        searchResults.appendChild(resultsList);
        searchResults.classList.remove('hidden');
      })
      .catch(error => {
        console.error('Error searching for location:', error);
        alert('Error searching for location. Please try again.');
      });
  }
  
  // Hide search results when clicking outside
  document.addEventListener('click', function(e) {
    const searchResults = document.getElementById('map-search-results');
    const searchInput = document.getElementById('map-search');
    const searchButton = document.getElementById('map-search-button');
    
    if (e.target !== searchInput && e.target !== searchButton && e.target !== searchResults) {
      searchResults.classList.add('hidden');
    }
  });
  
  // Try to get user's location on page load
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(
      (position) => {
        const lat = position.coords.latitude;
        const lng = position.coords.longitude;
        
        map.setView([lat, lng], 10);
      },
      (error) => {
        console.error('Error getting location:', error);
        // Default to a world view if location not available
      }
    );
  }
</script>

<%- include('../partials/footer') %>

