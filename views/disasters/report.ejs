<%- include('../partials/header') %>

<div class="container mx-auto px-4 py-8">
  <h1 class="text-3xl font-bold mb-6">Report a Disaster</h1>
  
  <div class="bg-white rounded-lg shadow-md overflow-hidden">
    <form action="/disasters/report" method="POST" enctype="multipart/form-data" class="p-6">
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div class="md:col-span-2">
          <label for="title" class="block text-gray-700 font-semibold mb-2">Disaster Title *</label>
          <input type="text" id="title" name="title" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary" value="<%= locals.formData ? formData.title : '' %>">
        </div>
        
        <div class="md:col-span-2">
          <label for="description" class="block text-gray-700 font-semibold mb-2">Description *</label>
          <textarea id="description" name="description" rows="4" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary"><%= locals.formData ? formData.description : '' %></textarea>
        </div>
        
        <div>
          <label for="type" class="block text-gray-700 font-semibold mb-2">Disaster Type *</label>
          <select id="type" name="type" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary">
            <option value="" disabled selected>Select disaster type</option>
            <option value="earthquake">Earthquake</option>
            <option value="flood">Flood</option>
            <option value="hurricane">Hurricane</option>
            <option value="wildfire">Wildfire</option>
            <option value="other">Other</option>
          </select>
        </div>
        
        <div>
          <label for="severity" class="block text-gray-700 font-semibold mb-2">Severity</label>
          <select id="severity" name="severity" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary">
            <option value="low" <%= locals.formData && formData.severity === 'low' ? 'selected' : '' %>>Low</option>
            <option value="medium" <%= !locals.formData || formData.severity === 'medium' ? 'selected' : '' %>>Medium</option>
            <option value="high" <%= locals.formData && formData.severity === 'high' ? 'selected' : '' %>>High</option>
            <option value="critical" <%= locals.formData && formData.severity === 'critical' ? 'selected' : '' %>>Critical</option>
          </select>
        </div>
        
        <div>
          <label for="affectedPeople" class="block text-gray-700 font-semibold mb-2">Estimated People Affected</label>
          <input type="number" id="affectedPeople" name="affectedPeople" min="0" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary" value="<%= locals.formData ? formData.affectedPeople : '0' %>">
        </div>
        
        <div class="md:col-span-2">
          <label class="block text-gray-700 font-semibold mb-2">Location *</label>
          <div id="location-map" class="mini-map mb-4 border border-gray-300 rounded-md"></div>
          
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label for="latitude" class="block text-gray-700 text-sm mb-1">Latitude *</label>
              <input type="text" id="latitude" name="latitude" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary" value="<%= locals.formData ? formData.latitude : '' %>">
            </div>
            
            <div>
              <label for="longitude" class="block text-gray-700 text-sm mb-1">Longitude *</label>
              <input type="text" id="longitude" name="longitude" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary" value="<%= locals.formData ? formData.longitude : '' %>">
            </div>
          </div>
          
          <div class="mt-4">
            <label for="address" class="block text-gray-700 text-sm mb-1">Address *</label>
            <input type="text" id="address" name="address" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary" value="<%= locals.formData ? formData.address : '' %>">
          </div>
          
          <div class="mt-4 flex gap-4">
            <button type="button" id="use-my-location" class="bg-secondary text-white font-bold py-2 px-4 rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2">
              <i class="fas fa-location-arrow mr-2"></i> Use My Location
            </button>
            <button type="button" id="search-location" class="bg-gray-200 text-gray-800 font-bold py-2 px-4 rounded-md hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2">
              <i class="fas fa-search mr-2"></i> Search Location
            </button>
          </div>
          
          <div id="search-container" class="mt-4 hidden">
            <div class="flex gap-2">
              <input type="text" id="location-search" placeholder="Enter city, address or place" class="flex-grow px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary">
              <button type="button" id="search-button" class="bg-primary text-white font-bold py-2 px-4 rounded-md hover:bg-blue-800 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2">
                Search
              </button>
            </div>
            <div id="search-results" class="mt-2"></div>
          </div>
        </div>
        
        <div class="md:col-span-2">
          <label for="images" class="block text-gray-700 font-semibold mb-2">Images (Optional, max 5)</label>
          <input type="file" id="images" name="images" multiple accept="image/*" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary">
          <p class="text-sm text-gray-500 mt-1">Upload up to 5 images (JPEG, PNG) to help assess the situation.</p>
        </div>
        
        <div class="md:col-span-2">
          <button type="submit" class="bg-primary text-white font-bold py-2 px-6 rounded-md hover:bg-blue-800 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2">
            Submit Report
          </button>
        </div>
      </div>
    </form>
  </div>
</div>

<script>
  // Initialize map
  const map = L.map('location-map').setView([20, 0], 2);
  let marker;
  
  // Add tile layer
  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
  }).addTo(map);
  
  // Function to update marker position
  function updateMarkerPosition(lat, lng) {
    // Update form values
    document.getElementById('latitude').value = lat.toFixed(6);
    document.getElementById('longitude').value = lng.toFixed(6);
    
    // Update or create marker
    if (marker) {
      marker.setLatLng([lat, lng]);
    } else {
      marker = L.marker([lat, lng], { draggable: true }).addTo(map);
      
      // Update form values when marker is dragged
      marker.on('dragend', function() {
        const position = marker.getLatLng();
        updateMarkerPosition(position.lat, position.lng);
        getAddressFromCoordinates(position.lat, position.lng);
      });
    }
    
    // Center map on marker
    map.setView([lat, lng], 13);
  }
  
  // Function to get address from coordinates using Nominatim
  function getAddressFromCoordinates(lat, lng) {
    fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}&zoom=18&addressdetails=1`)
      .then(response => response.json())
      .then(data => {
        if (data.display_name) {
          document.getElementById('address').value = data.display_name;
        }
      })
      .catch(error => {
        console.error('Error fetching address:', error);
        alert('Could not fetch address. Please enter it manually.');
      });
  }
  
  // Function to get coordinates from address using Nominatim
  function getCoordinatesFromAddress(address) {
    fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(address)}&limit=5`)
      .then(response => response.json())
      .then(data => {
        const searchResults = document.getElementById('search-results');
        searchResults.innerHTML = '';
        
        if (data.length === 0) {
          searchResults.innerHTML = '<p class="text-red-500">No results found. Try a different search term.</p>';
          return;
        }
        
        // Create list of results
        const resultsList = document.createElement('ul');
        resultsList.className = 'bg-white border border-gray-300 rounded-md divide-y divide-gray-200';
        
        data.forEach(result => {
          const item = document.createElement('li');
          item.className = 'px-3 py-2 hover:bg-gray-100 cursor-pointer';
          item.textContent = result.display_name;
          item.addEventListener('click', () => {
            updateMarkerPosition(parseFloat(result.lat), parseFloat(result.lon));
            document.getElementById('address').value = result.display_name;
            searchResults.innerHTML = '';
            document.getElementById('search-container').classList.add('hidden');
          });
          resultsList.appendChild(item);
        });
        
        searchResults.appendChild(resultsList);
      })
      .catch(error => {
        console.error('Error searching for location:', error);
        alert('Error searching for location. Please try again.');
      });
  }
  
  // Use my location button
  document.getElementById('use-my-location').addEventListener('click', function() {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const lat = position.coords.latitude;
          const lng = position.coords.longitude;
          
          updateMarkerPosition(lat, lng);
          getAddressFromCoordinates(lat, lng);
        },
        (error) => {
          console.error('Error getting location:', error);
          alert('Could not get your location. Please enter it manually or try again.');
        },
        { enableHighAccuracy: true }
      );
    } else {
      alert('Geolocation is not supported by your browser. Please enter location manually.');
    }
  });
  
  // Search location button
  document.getElementById('search-location').addEventListener('click', function() {
    const searchContainer = document.getElementById('search-container');
    searchContainer.classList.toggle('hidden');
    if (!searchContainer.classList.contains('hidden')) {
      document.getElementById('location-search').focus();
    }
  });
  
  // Search button
  document.getElementById('search-button').addEventListener('click', function() {
    const searchTerm = document.getElementById('location-search').value.trim();
    if (searchTerm) {
      getCoordinatesFromAddress(searchTerm);
    }
  });
  
  // Search on enter key
  document.getElementById('location-search').addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
      e.preventDefault();
      document.getElementById('search-button').click();
    }
  });
  
  // Click on map to set location
  map.on('click', function(e) {
    updateMarkerPosition(e.latlng.lat, e.latlng.lng);
    getAddressFromCoordinates(e.latlng.lat, e.latlng.lng);
  });
  
  // Initialize with user location if available
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(
      (position) => {
        const lat = position.coords.latitude;
        const lng = position.coords.longitude;
        
        updateMarkerPosition(lat, lng);
        getAddressFromCoordinates(lat, lng);
      },
      (error) => {
        console.error('Error getting location:', error);
        // Default to a world view if location not available
        map.setView([20, 0], 2);
      }
    );
  }
  
  // Check if form has pre-filled values
  const latitude = document.getElementById('latitude').value;
  const longitude = document.getElementById('longitude').value;
  
  if (latitude && longitude) {
    updateMarkerPosition(parseFloat(latitude), parseFloat(longitude));
  }
</script>

<%- include('../partials/footer') %>

